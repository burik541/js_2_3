/*
  –¶–µ–ª—å –∑–∞–¥–∞–Ω–∏—è: –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞ MVC. –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!" –≤ message-box

  –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø–ª–∞–Ω–æ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∏–∂–µ, –Ω–æ –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üßô‚Äç‚ôÇÔ∏è

–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ deleteMovie –≤ –æ–±—ä–µ–∫—Ç–µ model:
  - –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å id —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å
  - –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ movies
  - –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

2. –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤:
  - –≤ –º–µ—Ç–æ–¥–∞ view.init –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
  - –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
  - –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–∏—Ç—å id —Ñ–∏–ª—å–º–∞ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ –º–µ—Ç–æ–¥ deleteMovie –æ–±—ä–µ–∫—Ç–∞ controller

3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ deleteMovie –≤ –æ–±—ä–µ–∫—Ç–µ controller:
  - –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å id —Ñ–∏–ª—å–º–∞
  - –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞—Ç—å id —Ñ–∏–ª—å–º–∞ –≤ –º–µ—Ç–æ–¥ deleteMovie –æ–±—ä–µ–∫—Ç–∞ model
  - –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!" –≤ message-box
*/

// const model = {
//   movies: [],
//   addMovie(title, description) {
//     const id = Math.random()
//     const newMovie = { id, title, description }
//     this.movies.push(newMovie)
//     view.renderMovies(this.movies)
//   },
//   // your code
//   deleteMovie(id) {
//     this.movies = this.movies.filter(movie => movie.id !== id);
//     this.view.renderMovies(this.movies);
//   },
//   setView(viewInstance) {
//     this.view = viewInstance;
//   }
// }
//
// const view = {
//   init() {
//     this.moviesContainer = document.querySelector('.list');
//     this.messageBox = document.querySelector('.message-box');
//     this.renderMovies(model.movies)
//
//     const form = document.querySelector('.form')
//     const inputTitle = document.querySelector('.input-title')
//     const inputDescription = document.querySelector('.input-description')
//
//     form.addEventListener('submit', function (event) {
//       event.preventDefault()
//       const title = inputTitle.value
//       const description = inputDescription.value
//       controller.addMovie(title, description)
//
//       inputTitle.value = ''
//       inputDescription.value = ''
//     })
//
//     // your code
//
//     this.moviesContainer.addEventListener('click', (event) => {
//       if (event.target.classList.contains('delete-button')) {
//         const movieElement = event.target.closest('.movie');
//         const id = movieElement.id;
//         controller.deleteMovie(id);
//       }
//     });
//   },
//   renderMovies(movies) {
//     const list = document.querySelector('.list')
//     let moviesHTML = ''
//
//     for (const movie of movies) {
//       moviesHTML += `
//         <li id="${movie.id}" class="movie">
//           <b class="movie-title">${movie.title}</b>
//           <p class="movie-description">${movie.description}</p>
//           <button class="delete-button" type="button">–£–¥–∞–ª–∏—Ç—å üóë</button>
//         </li>
//       `
//     }
//
//     list.innerHTML = moviesHTML
//   },
//   displayMessage(message, isError = false) {
//     const messageBox = document.querySelector('.message-box')
//     messageBox.textContent = message
//     if (isError) {
//       messageBox.classList.remove('success')
//       messageBox.classList.add('error')
//     } else {
//       messageBox.classList.remove('error')
//       messageBox.classList.add('success')
//     }
//   },
// }
//
// const controller = {
//   addMovie(title, description) {
//     if (title.trim() !== '' && description.trim() !== '') {
//       model.addMovie(title, description)
//       view.displayMessage('–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
//     } else {
//       view.displayMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', true)
//     }
//   },
//   // your code
//   deleteMovie(id) {
//     model.deleteMovie(id);
//     view.displayMessage('–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!');
//   }
// }
//
// function init() {
//   model.setView(view)
//   view.init()
// }
//
// document.addEventListener('DOMContentLoaded', init)

const model = {
  movies: [],

  addMovie(title, description) {
    const id = Math.random().toString(36).substr(2, 9); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
    const newMovie = { id, title, description };
    this.movies.push(newMovie);
    view.renderMovies(this.movies);
  },

  deleteMovie(id) {
    // —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º –ø–æ id
    this.movies = this.movies.filter(movie => movie.id !== id);
    this.view.renderMovies(this.movies); // –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  },

  // —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å —Å view, –¥–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫—É
  setView(viewInstance) {
    this.view = viewInstance;
  }
};

const view = {
  init() {
    this.moviesContainer = document.querySelector('.list');
    this.messageBox = document.querySelector('.message-box');

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤
    this.renderMovies(model.movies);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    const form = document.querySelector('.form');
    const inputTitle = document.querySelector('.input-title');
    const inputDescription = document.querySelector('.input-description');

    form.addEventListener('submit', (event) => {
      event.preventDefault();
      const title = inputTitle.value;
      const description = inputDescription.value;
      controller.addMovie(title, description);
      inputTitle.value = '';
      inputDescription.value = '';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    this.moviesContainer.addEventListener('click', (event) => {
      if (event.target.classList.contains('delete-button')) {
        const movieElement = event.target.closest('.movie');
        const id = movieElement.id; // –ø–æ–ª—É—á–∞–µ–º id —Ñ–∏–ª—å–º–∞
        controller.deleteMovie(id);
      }
    });
  },

  renderMovies(movies) {
    let html = '';
    for (const movie of movies) {
      html += `
        <li id="${movie.id}" class="movie">
          <b class="movie-title">${movie.title}</b>
          <p class="movie-description">${movie.description}</p>
          <button class="delete-button" type="button">–£–¥–∞–ª–∏—Ç—å üóë</button>
        </li>
      `;
    }
    this.moviesContainer.innerHTML = html;
  },

  displayMessage(message, isError = false) {
    this.messageBox.textContent = message;
    if (isError) {
      this.messageBox.classList.remove('success');
      this.messageBox.classList.add('error');
    } else {
      this.messageBox.classList.remove('error');
      this.messageBox.classList.add('success');
    }
  },
};

const controller = {
  addMovie(title, description) {
    if (title.trim() !== '' && description.trim() !== '') {
      model.addMovie(title, description);
      view.displayMessage('–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } else {
      view.displayMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', true);
    }
  },

  deleteMovie(id) {
    model.deleteMovie(id);
    view.displayMessage('–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!');
  }
};

function init() {
  model.setView(view); // —Å–≤—è–∑—å –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  view.init();
}

document.addEventListener('DOMContentLoaded', init);
